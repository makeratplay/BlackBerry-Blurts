
package com.mlhsoftware.Blurts;

import com.mlhsoftware.ui.blurts.*;
import net.rim.device.api.system.Application;
import net.rim.device.api.ui.UiApplication;
import net.rim.device.api.ui.container.MainScreen;
import net.rim.device.api.ui.Graphics;
import net.rim.device.api.system.Bitmap;
import net.rim.device.api.ui.MenuItem;
import net.rim.device.api.ui.component.Menu;
import java.util.*;

import net.rim.device.api.ui.*;
import net.rim.device.api.ui.component.*;
import net.rim.device.api.ui.container.*;

import net.rim.device.api.system.EventLogger;
import net.rim.device.api.bluetooth.BluetoothSerialPort;
import net.rim.device.api.system.Characters;

import net.rim.device.api.system.RuntimeStore;

import com.mlhsoftware.webapi.blurts.*;
import net.rim.blackberry.api.invoke.Invoke;
import net.rim.blackberry.api.invoke.MessageArguments;
import net.rim.device.api.system.DeviceInfo;

import net.rim.device.api.system.CodeModuleManager;

import net.rim.device.api.system.DeviceInfo;
import net.rim.device.api.system.RadioInfo;

import javax.bluetooth.*;
import javax.bluetooth.DiscoveryAgent;
import javax.bluetooth.LocalDevice;

/**
 * 
 */
class StatusScreen extends MainScreen implements BlurtsThread.BlurtsCallback, WebApiBase.WebAPICallback, ChkVersionScreen.DlgCallback 
{
  //private static final Bitmap m_statusLED = Bitmap.getBitmapResource( "LED.png" );
  private int m_bitmapWidth;
  private int m_bitmapHeight;
  private long m_chkVersionTS;

  private RichTextField m_statusField;
  private Blurts m_app;
  private TitlebarManager m_titlebarMgr;
  private BlurtsThread m_BlurtsThread;

  private BlurtsScreenManager _screen;
  private ForegroundManager _foreground;
  private Statusbar m_statusBar;
  private boolean m_displayingChkVersionScreen;

  private String m_BluetoothName;
  private String m_BluetoothAddress;

  private ListStyleLabelField _SentAlert = null;
  private ListStyleLabelField _RcvCmd = null;
  private ListStyleLabelField _BluetoothNameLabel = null;
  private ListStyleLabelField _BluetoothAddressLabel = null;
  private int _CmdCount = 0;
  private int _AlertCount = 0;
  private boolean m_bluetoothOn;

  private boolean m_connected;

  StatusScreen( Blurts app ) 
  {
    super( DEFAULT_MENU | DEFAULT_CLOSE | Manager.NO_VERTICAL_SCROLL );
    m_chkVersionTS = 0;
    m_app = app;
    m_BlurtsThread = null;
    m_connected = false;
    m_statusBar = null;
    m_displayingChkVersionScreen = false;
    m_bluetoothOn = false;

    String title = "Blurts";
    if ( ActivationKeyStore.isKeyValid() )
    {
      title += " Pro";
    }

    initBluetooth();

    _screen = new BlurtsScreenManager();
    add( _screen );

    // Build the titlebar with Cancel and Save buttons
    BatteryLevel battery = new BatteryLevel();
    SignalLevel signal = new SignalLevel();



    m_titlebarMgr = new TitlebarManager( title, battery, signal );
    _screen.add( m_titlebarMgr );


    _foreground = new ForegroundManager();
    _screen.add( _foreground );

    if ( !DAOptionsProperties.GetInstance().everConnected() )
    {
      String addr = "Blurts@mlhsoftware.com";
      String name = "MLH Software";
      String subject = "Thank you for installing " + title;
      String message = "Thank you for installing Blurts. We are certain that you will come to rely on Blurts when using your PC.\n" +
                       "\n" +
                       "To complete the setup you MUST install the Blurts desktop software on your computer from http://www.mlhsoftware.com/Blurts. (Select the download button.) \n" +
                       "\n" +
                       "Visit the Blurts Setup page at http://www.mlhsoftware.com/Blurts/setup.html for step by step install instructions and additional help information.\n" +
                       "\n" +
                       "Best regards,\n" +
                       "MLH Software\n" +
                       "\n" +
                       "www.mlhsoftware.com\n" +
                       "Follow us on Twitter @mlhsoftware\n" +
                       "Become a fan on Facebook\n" +
                       "\n\n" +
                       "[This message is automatically generated by the application.]\n";
      BlurtsEmailListener.addToInboxFolder( addr, name, subject, message );

      ListStyleFieldSet fieldSet = new ListStyleFieldSet();
      String msg;
      msg = "Thank you for downloading Blurts.\n"
            + "To complete the setup you must install and setup the Blurts desktop software on your computer from www.MLHSoftware.com/Blurts.";

      ListStyleRichTextlField info2 = new ListStyleRichTextlField( msg );
      fieldSet.add( info2 );

      // Action buttons
      Bitmap caret = Bitmap.getBitmapResource( "greenArrow.png" );
      ListStyleButtonField link = new ListStyleButtonField( "Email me the link", caret );
      link.setChangeListener( new FieldChangeListener()
      {
        public void fieldChanged( Field field, int context )
        {
          OnEmailLink();
        }
      } );
      fieldSet.add( link );
      _foreground.add( fieldSet );
    }

    m_app.setDisconnectedIcon();
    buildUI();

    

    m_statusBar = new Statusbar();
    _screen.add( m_statusBar );

    //addMenuItem( _control );
    addMenuItem( _options );
    addMenuItem( _test );
    addMenuItem( _bluetoothSetting );
    
    addMenuItem( _about );
    addMenuItem( _chkForUpdates );
    addMenuItem( _hideMenu );
    if ( !ActivationKeyStore.isKeyValid() )
    {
      addMenuItem( _activate );
    }
  }

  private void initBluetooth()
  {
    m_BluetoothName = "No Bluetooth";
    m_BluetoothAddress = "No Bluetooth";
    try
    {
      if ( LocalDevice.isPowerOn() )
      {
        LocalDevice localDevice = LocalDevice.getLocalDevice();
        if ( localDevice != null )
        {
          //m_discoverableRaw = m_localDevice.getDiscoverable();
          //m_localDevice.setDiscoverable( DiscoveryAgent.GIAC );
          m_BluetoothName = localDevice.getFriendlyName();
          String tmp = localDevice.getBluetoothAddress();
          int len = tmp.length();
          m_BluetoothAddress = "";
          for ( int x = 0; x < len; x++ )
          {
            if ( x != 0 && x % 2 == 0 )
            {
              m_BluetoothAddress += ":";
            }
            m_BluetoothAddress += tmp.charAt( x );
          }
        }
        m_bluetoothOn = true;
      }
      else
      {
        m_BluetoothName = "Bluetooth is off";
        m_BluetoothAddress = "";
        m_bluetoothOn = false;
      }
    }
    catch ( javax.bluetooth.BluetoothStateException e )
    {
      String msg = "initBluetooth failed: " + e.toString();
      EventLogger.logEvent( Blurts.LOGGER_ID, msg.getBytes(), EventLogger.SEVERE_ERROR );
      System.out.println( msg );
    }
    catch ( Exception e )
    {
      String msg = "initBluetooth failed 2: " + e.toString();
      EventLogger.logEvent( Blurts.LOGGER_ID, msg.getBytes(), EventLogger.SEVERE_ERROR );
      System.out.println( msg );
    }
  }

  private void buildUI()
  {
    /* Status info */

    String title = "Blurts";
    if ( ActivationKeyStore.isKeyValid() )
    {
      title += " Pro";
    }


    ListStyleFieldSet infoSet = new ListStyleFieldSet();
    ListStyleLabelField info = new ListStyleLabelField( "Alert Info" );
    infoSet.add( info );
    /*
    info = new ListStyleLabelField( null, "Version", AboutScreen.APP_VERSION );
    infoSet.add( info );

    String key = "";
    ActivationKeyStore keyStore = ActivationKeyStore.GetInstance();
    if ( keyStore != null )
    {
      key = keyStore.getKey();
    }

    info = new ListStyleLabelField( null, "Key", key );
    infoSet.add( info );
     * */

    _SentAlert = new ListStyleLabelField( null, "Sent", "0" );
    infoSet.add( _SentAlert );

    _RcvCmd = new ListStyleLabelField( null, "Received", "0" );
    infoSet.add( _RcvCmd );


    _foreground.add( infoSet );

    infoSet = new ListStyleFieldSet();

    info = new ListStyleLabelField( "Bluetooth Info" );
    infoSet.add( info );

    _BluetoothNameLabel = new ListStyleLabelField( null, "Name", m_BluetoothName );
    infoSet.add( _BluetoothNameLabel );

    _BluetoothAddressLabel = new ListStyleLabelField( null, "Address", m_BluetoothAddress );
    infoSet.add( _BluetoothAddressLabel );

    _foreground.add( infoSet );

    /*
    infoSet = new ListStyleFieldSet();

    String deviceName = DeviceInfo.getDeviceName();
    String deviceOS = CodeModuleManager.getModuleVersion( CodeModuleManager.getModuleHandleForObject( "" ) );

    info = new ListStyleLabelField( "BlackBerry Info" );
    infoSet.add( info );

    info = new ListStyleLabelField( null, "Model", deviceName );
    infoSet.add( info );

    info = new ListStyleLabelField( null, "Version", deviceOS );
    infoSet.add( info );

    int deviceId = DeviceInfo.getDeviceId();
    String deviceIdText = java.lang.Integer.toHexString( deviceId );
    String pin = deviceIdText.toUpperCase();
    info = new ListStyleLabelField( null, "PIN", pin );
    infoSet.add( info );

    String battery2 = DeviceInfo.getBatteryLevel() + "%";
    info = new ListStyleLabelField( null, "Battery", battery2 );
    infoSet.add( info );

    String signal2 = RadioInfo.getSignalLevel() + " dBm";
    info = new ListStyleLabelField( null, "Signal", signal2 );
    infoSet.add( info );


    _foreground.add( infoSet );
     * */



    /* End Status info */
  }

  private void OnEmailLink()
  {
    String arg = MessageArguments.ARG_NEW;
    String to = "";
    String subject = "Blurts desktop software link";
    String body = "Click the link below on your computer to download the Blurts desktop software and complete the Blurts setup.\n\n";
    String url = "http://www.mlhsoftware.com/blurts/?a=download&v=" + AboutScreen.APP_VERSION + "&b=" + DeviceInfo.getDeviceName();
    if ( AboutScreen.BETA )
    {
      url += "&beta=true";
    }
    body += url;
    MessageArguments msgArg = new MessageArguments( arg, to, subject, body );
    Invoke.invokeApplication( Invoke.APP_TYPE_MESSAGES, msgArg );
  }

  public void setBlurtsThread( BlurtsThread BlurtsThread )
  {
    m_BlurtsThread = BlurtsThread;
    if ( m_BlurtsThread != null )
    {
      m_BlurtsThread.setCallBack( this );
    }
  }

  public void removeUpgradeMenu()
  {
    removeMenuItem( _activate );
    m_BlurtsThread.statusMessage( "Welcome to Blurts Pro!" );
    m_titlebarMgr.setTitleText( "Blurts Pro" );
    invalidate();
  }

     /* 
  protected void paint( Graphics graphics )
  {
    super.paint( graphics );


    int screenWidth = Graphics.getScreenWidth();
    int screenHeight = Graphics.getScreenHeight();
    int titleHeight = m_titlebarMgr.getHeight();

    

    graphics.setBackgroundColor( Graphics.BLACK );
    graphics.fillRect( 0, titleHeight, screenWidth+1, screenHeight );

    
}*/

  private void onLock()
  {
    if ( m_BlurtsThread != null )
    {
      m_BlurtsThread.lockMessage();
    }
  }

  private void onSendClipboard()
  {
    if ( m_BlurtsThread != null )
    {
      m_BlurtsThread.sendClipboardToPC();
    }
  }

  private void onGetClipboard()
  {
    if ( m_BlurtsThread != null )
    {
      m_BlurtsThread.readClipboardFromPC();
    }
  }

  private void onScreenCapture()
  {
    if ( m_BlurtsThread != null )
    {
      Application.getApplication().invokeLater( new Runnable() { public void run() { m_BlurtsThread.ScreenCapture( 100, -1, -1, -1, -1 ); } }, 5000, false );
    }
  }

  private void onSendTest()
  {
    if ( m_BlurtsThread != null )
    {
      m_BlurtsThread.statusMessage( "Blurts test message!" );
    }
  }

  private void onBluetoothSettings()
  {
    Invoke.invokeApplication( Invoke.APP_TYPE_BLUETOOTH_CONFIG, null );
  }

  private void onOptions()
  {
    BlueToothSetup setupScrn = new BlueToothSetup();
    UiApplication.getUiApplication().pushScreen( setupScrn );
  }

  private void onControlPC()
  {
    if ( ActivationKeyStore.isKeyValid() )
    {
      ControlScreen screen = new ControlScreen();
      screen.setBlurtsThread( m_BlurtsThread );
      UiApplication.getUiApplication().pushScreen( screen );
    }
  }

  

  public boolean keyChar( char key, int status, int time )
  {
    boolean retVal = true;
    switch ( key )
    {
      case Characters.ESCAPE:
      {
        UiApplication.getUiApplication().requestBackground();
        break;
      }
      case 'l':
      {
        onLock();
        break;
      }
      case 's':
      {
        onSendClipboard();
        break;
      }
      case 'r':
      {
        onGetClipboard();
        break;
      }
      case 'x':
      {
        onScreenCapture();
        break;
      }

      case 'p':
      {
        onControlPC();
        break;
      }

      default:
      {
        retVal = super.keyChar( key, status, time );
        break;
      }
    }

    return retVal;
  }

  private MenuItem _activate = new MenuItem( "Upgrade to Pro", 30, 30 )
  {
    public void run()
    {
      m_app.promptForKey();
    }
  };

  private MenuItem _test = new MenuItem( "Send Test Msg", 40, 40 )
  {
    public void run()
    {
      onSendTest();
    }
  };

  private MenuItem _control = new MenuItem( "Control PC", 41, 41 )
  {
    public void run()
    {
      onControlPC();
    }
  };

  private MenuItem _options = new MenuItem( "Options", 41, 41 )
  {
    public void run()
    {
      onOptions();
    }
  };

  private MenuItem _about = new MenuItem( "About", 80, 80 )
  {
    public void run()
    {
      AboutScreen aboutScreen = new AboutScreen();
      UiApplication.getUiApplication().pushScreen( aboutScreen );
    }
  };

  private MenuItem _chkForUpdates = new MenuItem( "Check for Updates", 81, 81 )
  {
    public void run()
    {
      checkForUpdate( false );
    }
  };


  private MenuItem _bluetoothSetting = new MenuItem( "Bluetooth Settings", 82, 82 )
  {
    public void run()
    {
      onBluetoothSettings();
    }
  };


  private MenuItem _hideMenu = new MenuItem( "Hide", 83, 83 )
  {
    public void run()
    {
      UiApplication.getUiApplication().requestBackground();
    }
  };


  public void checkForUpdate( boolean silent )
  {
    if ( !m_displayingChkVersionScreen )
    {
      if ( silent )
      {
        VersionCheck versionCheck = new VersionCheck();
        versionCheck.setAppName( ActivationKeyStore.APP_NAME );
        versionCheck.setVersion( AboutScreen.APP_VERSION );
        versionCheck.setBeta( AboutScreen.BETA );
        versionCheck.setCallback( this );
        versionCheck.process();
      }
      else
      {
        m_displayingChkVersionScreen = true;
        ChkVersionScreen dlg = new ChkVersionScreen( null, null, this );
        UiApplication.getUiApplication().pushScreen( dlg );
      }
    }
  }

  public void ChkVersionScreenClosed()
  {
    m_displayingChkVersionScreen = false;
  }

  public void callComplete( boolean wasSuccess, Object obj )
  {
    if ( obj instanceof VersionCheck )
    {
      if ( wasSuccess )
      {
        VersionCheck versionCheck = (VersionCheck)obj;
        if ( versionCheck.getNew() )
        {
          m_displayingChkVersionScreen = true;
          ChkVersionScreen dlg = new ChkVersionScreen( versionCheck.getNewVersion(), versionCheck.getUrl(), this );
          UiApplication.getUiApplication().pushScreen( dlg );
          UiApplication.getUiApplication().requestForeground();
        }
      }
    }
  }


  public boolean onClose()
  {
    boolean retVal = false;
    int answer = Dialog.ask( Dialog.D_YES_NO, "Exit Blurts?" );
    if ( answer == Dialog.YES )
    {
      try
      {
        //Remove the reference to Blurts GUI
        if ( m_BlurtsThread != null )
        {
          m_BlurtsThread.stopThread();
          m_BlurtsThread.setCallBack( null );
        }
        EventLogger.logEvent( Blurts.LOGGER_ID, "Shutdown".getBytes(), EventLogger.DEBUG_INFO );
      }
      catch ( Exception ie )
      {
        String msg = "onClose Error: " + ie.toString();
        EventLogger.logEvent( Blurts.LOGGER_ID, msg.getBytes(), EventLogger.SEVERE_ERROR );
      }

      try
      {
        RuntimeStore runtimeStore = RuntimeStore.getRuntimeStore();
        synchronized ( runtimeStore )
        {
          runtimeStore.remove( Blurts.APP_ID );
        }
      }
      catch ( Exception ie )
      {
        String msg = "RuntimeStore Error: " + ie.toString();
        EventLogger.logEvent( Blurts.LOGGER_ID, msg.getBytes(), EventLogger.SEVERE_ERROR );
      }

      m_app.setDisconnectedIcon();
      super.close();
      retVal = true;
    }
    return retVal;
  }

  // interface BlurtsCallback
  public void BluetoothConnect()
  {
    m_connected = true;

    try
    {
      if ( !DAOptionsProperties.GetInstance().everConnected() )
      {
        DAOptionsProperties.GetInstance().setEverConnected( true );
        DAOptionsProperties.GetInstance().save();
        _foreground.deleteAll();
        buildUI();
      }
    }
    catch ( Exception ex )
    {
    }

    if ( m_statusBar != null )
    {
      m_statusBar.setConnected( true );
      ToolbarManager.BACKGROUND_COLORS = Statusbar.colsConnected;
    }
    m_app.setConnectedIcon();
    invalidate();
  }

  public void BluetoothDisconnect()
  {
    m_connected = false;
    if ( m_statusBar != null )
    {
      m_statusBar.setConnected( false );
      ToolbarManager.BACKGROUND_COLORS = Statusbar.colsDisconnected;
    }
    m_app.setDisconnectedIcon();
    invalidate();
  }

  public void MsgArrived()
  {
    if ( m_statusBar != null )
    {
      m_statusBar.incCmdCnt();
    }

    if ( _SentAlert != null )
    {
      _CmdCount++;
      _RcvCmd.setRightText( "" + _CmdCount );
    }

    invalidate();
    /*
    if ( m_blurtsGUI != null )
    {
      try
      {
        Calendar cal = Calendar.getInstance();
        synchronized ( m_blurtsGUI.m_statusText )
        {
          if ( m_connected )
          {
            m_blurtsGUI.m_statusText = "connected";
          }
          else
          {
            m_blurtsGUI.m_statusText = "disconnected";
          }
          //m_blurtsGUI.m_statusText = m_status + "(" + sdf.format( cal.getTime() ) + ")";
        }
        m_blurtsGUI.invokeLater( new Runnable() { public void run() { m_blurtsGUI.statusUpdate(); } } );
      }
      catch ( Exception e )
      {
        String msg = "GUI Exeption: " + e.toString();
        EventLogger.logEvent( Blurts.LOGGER_ID, msg.getBytes(), EventLogger.SEVERE_ERROR );
        System.out.println( msg );
      }
    }
     * */
  }

  public void AlertQueued()
  {
    if ( m_statusBar != null )
    {
      m_statusBar.incAlertCnt();
    }
    if ( _SentAlert != null )
    {
      _AlertCount++;
      _SentAlert.setRightText( "" + _AlertCount );
    }

    invalidate();
  }

  public void LocateMeAlert()
  {
  }

  //public void DoVersionCheck()
  //{
  //  checkForUpdate( true );
  //}

  public void OnTimer()
  {
    // do version check yet?
    long currentTime = new Date().getTime();
    if ( m_chkVersionTS < currentTime )
    {
      checkForUpdate( true );
      //DoVersionCheck();
      // ms * s * m * h
      m_chkVersionTS = currentTime + ( 1000 * 60 * 60 * 48 );
    }


    try
    {
      if ( LocalDevice.isPowerOn() != m_bluetoothOn )
      {
        initBluetooth();
        _BluetoothNameLabel.setRightText( m_BluetoothName );
        _BluetoothAddressLabel.setRightText( m_BluetoothAddress );
        invalidate();
      }
    }
    catch ( Exception e )
    {
      String msg = "OnTimer isPowerOn failed: " + e.toString();
      EventLogger.logEvent( Blurts.LOGGER_ID, msg.getBytes(), EventLogger.SEVERE_ERROR );
      System.out.println( msg );
    }
  }

} 
